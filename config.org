* TODOs

** TODO Reorganize into more useful sections


* Installation

I recommend restarting emacs after install.

* Base

This is my version of "sensible defaults."

#+name: init-core-package
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  (setq use-package-always-ensure t)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen -1)
  (setq initial-buffer-choice t)

  (fringe-mode -1)

  (electric-pair-mode 1)

  (unless (package-installed-p 'vertico)
    (fido-mode 1)
    (fido-vertical-mode 1))

  (setq
   backup-by-copying t                    ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.emacs-saves/"))           ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups

  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; MacOS
  (when (eq system-type 'darwin)
    (setq ns-use-native-fullscreen t
   	mac-right-command-modifier 'meta
   	mac-left-command-modifier 'meta
   	mac-option-key-is-meta nil
   	mac-command-key-is-meta t
   	mac-command-modifier 'meta
   	mac-option-modifier 'super
   	mac-use-title-bar nil))

  (use-package exec-path-from-shell
    :config (exec-path-from-shell-initialize))

  (use-package vterm)

  (use-package expand-region
    :bind ("C-=" . er/expand-region))

  (which-key-mode)

  (use-package magit)

  (savehist-mode)
  (save-place-mode 1)
  (winner-mode)

  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "M-z") 'zap-up-to-char)
  (keymap-global-set "M-o" 'other-window)

  (setq save-interprogram-paste-before-kill t
        apropos-do-all t
        require-final-newline t
        load-prefer-newer t)

  ;; e.g., for s=LookAtMe, word commands will stop at Look
  (add-hook 'prog-mode-hook 'subword-mode)

#+end_src


* Completion engine

All of these packages are related to [[https://github.com/minad/vertico][vertico]], which are more true to
base emacs than alternatives. In the same vein, I use corfu instead of
company which has a [[https://github.com/minad/corfu][very helpful github]].

#+begin_src emacs-lisp
  (use-package vertico
    :init (vertico-mode))

  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  (use-package 
    marginalia
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'left)
    :init
    (marginalia-mode))

  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
  	 ("C-c M-x" . consult-mode-command)
  	 ("C-c h" . consult-history)
  	 ("C-c k" . consult-kmacro)
  	 ("C-c m" . consult-man)
  	 ("C-c i" . consult-info)
  	 ([remap Info-search] . consult-info)
  	 ;; C-x bindings in `ctl-x-map'
  	 ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
  	 ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
  	 ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
  	 ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
  	 ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
  	 ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
  	 ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
  	 ;; Custom M-# bindings for fast register access
  	 ("M-#" . consult-register-load)
  	 ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
  	 ("C-M-#" . consult-register)
  	 ;; Other custom bindings
  	 ("M-y" . consult-yank-pop)                ;; orig. yank-pop
  	 ;; M-g bindings in `goto-map'
  	 ("M-g e" . consult-compile-error)
  	 ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
  	 ("M-g g" . consult-goto-line)             ;; orig. goto-line
  	 ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
  	 ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
  	 ("M-g m" . consult-mark)
  	 ("M-g k" . consult-global-mark)
  	 ("M-g i" . consult-imenu)
  	 ("M-g I" . consult-imenu-multi)
  	 ;; M-s bindings in `search-map'
  	 ("M-s d" . consult-find)                  ;; Alternative: consult-fd
  	 ("M-s c" . consult-locate)
  	 ("M-s g" . consult-grep)
  	 ("M-s G" . consult-git-grep)
  	 ("M-s r" . consult-ripgrep)
  	 ("M-s l" . consult-line)
  	 ("M-s L" . consult-line-multi)
  	 ("M-s k" . consult-keep-lines)
  	 ("M-s u" . consult-focus-lines)
  	 ;; Isearch integration
  	 ("M-s e" . consult-isearch-history)
  	 :map isearch-mode-map
  	 ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
  	 ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
  	 ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
  	 ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
  	 ;; Minibuffer history
  	 :map minibuffer-local-map
  	 ("M-s" . consult-history)                 ;; orig. next-matching-history-element
  	 ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
  	register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
  	xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )

  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("M-." . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
    	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
    		 nil
    		 (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (use-package corfu
    :custom
    (corfu-auto t)          ;; Enable auto completion
    ;; (corfu-separator ?_) ;; Set to orderless separator, if not using space
    :bind
    ;; Another key binding can be used, such as S-SPC.
    (:map corfu-map ("S-SPC" . corfu-insert-separator))
    :init
    (global-corfu-mode))

  (use-package corfu-terminal)

  ;; Add extensions
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
  	 ("C-c p t" . tempel-complete)
  	 ("C-c p g" . complete-tag)        ;; etags
  	 ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
  	 ("C-c p h" . cape-history)
  	 ("C-c p f" . cape-file)
  	 ("C-c p k" . cape-keyword)
  	 ("C-c p s" . cape-elisp-symbol)
  	 ("C-c p e" . cape-elisp-block)
  	 ("C-c p a" . cape-abbrev)
  	 ("C-c p l" . cape-line)
  	 ("C-c p w" . cape-dict)
  	 ("C-c p :" . cape-emoji)
  	 ("C-c p \\" . cape-tex)
  	 ("C-c p _" . cape-tex)
  	 ("C-c p ^" . cape-tex)
  	 ("C-c p &" . cape-sgml)
  	 ("C-c p r" . cape-rfc1345))
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'tempel-complete)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    (add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;; (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)

    ;; Allows you to use fuzzyfinding by pressing space
    ;; (keymap-set corfu-map "SPC" 'corfu-insert-separator)

    (setq corfu-auto t)
    )
#+end_src

Template management with tempel
#+begin_src emacs-lisp
  (use-package tempel
    ;; Require trigger prefix before template name when completing.
    ;; :custom
    ;; (tempel-trigger-prefix "<")

    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
    	 ("M-*" . tempel-insert))

    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
    		(cons #'tempel-expand
    		      completion-at-point-functions)))

    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    (global-tempel-abbrev-mode)
    )
#+end_src

* Org

** Base org setup

Inspired by [[https:https://midirus.com/emacs/tutorial#clipboard][midirus]] and [[https:https://www.labri.fr/perso/nrougier/GTD/index.html][N. Rougier]]

+ Add tasks with org-capture.
+ Sort your inbox with org-refile.
+ Groom your backlog with org-todo.
+ Plan your projects with org-schedule.
+ Get things done with org-agenda.

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-todo-keywords
  	'((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)" "CANCELLED(c@/!)")))
    (setq org-log-done 'time))

  (use-package org-modern
    :config
    (setq org-modern-todo-faces
  	'(("NEXT" :foreground "purple" :weight bold :background "orange")))
    (global-org-modern-mode))


  ;; Allow moving task from anywhere into your projects:
  (setq org-refile-targets '(("~/org/projects.org" :maxlevel . 1)))

  ;; Automatically save org files after refile
  (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))

  ;; Setup capture template to write new tasks to ~/org/inbox.org
  (setq org-capture-templates
        '(("t" "todo" entry (file "~/org/inbox.org")
           "* TODO %?\n/Entered on/ %U\n")))

  ;; Press F6 to capture a task
  (global-set-key (kbd "<f6>") 'org-capture)
#+end_src

** Org agenda

#+begin_src emacs-lisp
  ;; org-agenda provides the GTD dashboard
  (use-package org-agenda
    :ensure nil
    :config
    ;; The agenda pulls data from the following files:
    (setq org-agenda-files '("~/org/projects.org" "~/org/inbox.org"))

    ;; The GTD view
    (setq-default org-agenda-custom-commands
      		'(("g" "Get Things Done (GTD)"
      		   ((agenda ""
      			    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))
      			     (org-deadline-warning-days 0)))
      		    (todo "NEXT"
      			  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))
      			   (org-agenda-prefix-format "  %i %-12:c [%e] ")
      			   (org-agenda-overriding-header "\nTasks\n")))
      		    (tags-todo "inbox"
      			       ((org-agenda-prefix-format "  %?-12t% s")
      				(org-agenda-overriding-header "\nInbox\n")))
      		    (tags "CLOSED>=\"<today>\""
      			  ((org-agenda-overriding-header "\nCompleted today\n")))))))

    ;; Press F4 to get things done!
    (global-set-key (kbd "<f4>") (lambda () (interactive) (org-agenda nil "g"))))

  ;; Add a new org-capture 'j' for journaling
  (add-to-list 'org-capture-templates
  	     '("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
  	       "* %?\n")
  	     t)


  ;; From: https://stackoverflow.com/a/70131908
  ;; With auto save disabled
  (defun org-archive-done-tasks ()
    "Archive all tasks marked DONE in the file."
    (interactive)
    ;; Disable auto save to avoid repeated file write.
    (setq org-archive-subtree-save-file-p nil)
    ;; unwind-protect is like try/finally
    (unwind-protect
        ;; process the entry in reverse to avoid changes in positioning
        (mapc (lambda(entry)
                (goto-char entry)
                (org-archive-subtree))
              (reverse (org-map-entries (lambda () (point)) "TODO=\"DONE\"" 'file)))
      ;; Enable auto save, even if an exception is raised.
      (setq org-archive-subtree-save-file-p t))
    (org-save-all-org-buffers))

  (setq org-agenda-prefix-format
        '((agenda . " %i %-12:c%?-12t% s")
  	(todo   . " ")
  	(tags   . " %i %-12:c")
  	(search . " %i %-12:c")))
#+end_src

* Project management
Using [[https://magit.vc/][magit]] for all of my git needs!
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

* Programming modes
** LaTeX
Not sure whether I want to keep all of my org-babel declarations in
one place or not. For now, I wont.
#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((latex . t)
                                 (scheme . t)))
#+end_src

** Web
Just testing out web-mode for now... may pivot.
#+begin_src emacs-lisp
  (use-package web-mode
    :mode ("\\.html\\'" "\\.tmpl\\'" "\\.css\\'"))
#+end_src

** C
#+begin_src emacs-lisp
  (defun c--set-offset ()
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
    (setq c-set-style "k&r")
    (setq c-basic-offset 4)
    (setq c-ts-mode-indent-offset 4)
    (setq c-default-style (cons '(c-mode . "k&r") c-default-style)))

  (add-hook 'c-mode-hook 'c--set-offset)
  (add-hook 'c-ts-mode-hook 'c--set-offset)
#+end_src

** Lua
#+begin_src emacs-lisp
  (use-package lua-mode)
#+end_src

* Editing
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind
    (("C->" . 'mc/mark-next-like-this)
     ("C-<" . 'mc/mark-previous-like-this)))
#+end_src

** Generic
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config (rainbow-delimiters-mode 1))
#+end_src

** Lisp
#+begin_src emacs-lisp
  (use-package paredit
    :magic ("%Geiser" . paredit-mode)
    :hook ((scheme-mode . paredit-mode)
  	 (lisp-mode . paredit-mode)
  	 (emacs-lisp-mode . paredit-mode)
  	 (racket-mode . paredit-mode)
  	 ;; (racket-repl-mode . paredit-mode)
  	 ))
  (advice-add 'paredit-RET
  	    :after
  	    (lambda ()
  	      (when (string-prefix-p "*Racket REPL"
  				     (buffer-name (current-buffer)))
  		(newline))))
#+end_src

* File modes

Add pdf-tools (which requires an install on the system... perhaps I
will check if it is installed on the system before attempting).
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode "\\.pdf\\'"
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install :no-query))
#+end_src

** TODO Not working
This mode allows the reading of epub documents (like /Mastering
Emacs/)
#+begin_src emacs-lisp
  (use-package nov
    :mode "\\.epub\\'"
    :config
    (setq nov-unzip-program (executable-find "bsdtar")
  	nov-unzip-args '("-xC" directory "-f" filename)))
#+end_src

* tree-sitter

https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((bash "https://github.com/tree-sitter/tree-sitter-bash")
  	(c "https://github.com/tree-sitter/tree-sitter-c")
  	(cpp "https://github.com/tree-sitter/tree-sitter-cpp")
  	(cmake "https://github.com/uyha/tree-sitter-cmake")
  	(css "https://github.com/tree-sitter/tree-sitter-css")
  	(elisp "https://github.com/Wilfred/tree-sitter-elisp")
  	(go "https://github.com/tree-sitter/tree-sitter-go")
  	(html "https://github.com/tree-sitter/tree-sitter-html")
  	(java "https://github.com/tree-sitter/tree-sitter-java")
  	(javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
  	(json "https://github.com/tree-sitter/tree-sitter-json")
  	(make "https://github.com/alemuller/tree-sitter-make")
  	(markdown "https://github.com/ikatyang/tree-sitter-markdown")
  	(python "https://github.com/tree-sitter/tree-sitter-python")
  	(toml "https://github.com/tree-sitter/tree-sitter-toml")
  	(tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
  	(typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
  	(yaml "https://github.com/ikatyang/tree-sitter-yaml")))
#+end_src

Run the following command to install a treesitter lang from the above
sources:
#+name: python-treesit-install-example
#+begin_example
M-x treesit-install-language-grammar RET python
#+end_example

Use the treesitter mode instead of the default major mode (I think
that you still have access to the default major mode utilities).
#+begin_src emacs-lisp
  (setq major-mode-remap-alist
        '((python-mode . python-ts-mode)
  	(java-mode . java-ts-mode)
  	(c-mode . c-ts-mode)
  	(cpp-mode . cpp-ts-mode)))

#+end_src

#+begin_src emacs-lisp
  (use-package go-ts-mode
    :init
    (add-to-list 'treesit-language-source-alist '(go "https://github.com/tree-sitter/tree-sitter-go"))
    (add-to-list 'treesit-language-source-alist '(gomod "https://github.com/camdencheek/tree-sitter-go-mod"))
    ;; (dolist (lang '(go gomod)) (treesit-install-language-grammar lang))
    (add-to-list 'auto-mode-alist '("\\.go\\'" . go-ts-mode))
    (add-to-list 'auto-mode-alist '("/go\\.mod\\'" . go-mod-ts-mode))
    (add-hook 'go-ts-mode-hook (lambda () (setq tab-width 4)))
    (add-hook 'go-ts-mode-hook (lambda ()
  			       (add-hook 'before-save-hook 'eglot-ensure t t)
  			       (add-hook 'before-save-hook 'eglot-format-buffer t t)))
    :config
    (setq go-ts-mode-indent-offset 4)
    ;; :hook
    ;; (go-ts-mode . lsp-deferred)
    ;; (go-ts-mode-hook . eglot-ensure)
    ;; (go-ts-mode . go-format-on-save-mode)
    )
#+end_src

* Eglot
This is the place where I will make all of my eglot configurations,
which will most likely be limited to auto starting the server for
different modes.
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'eglot-ensure)
  (add-hook 'python-ts-mode-hook 'eglot-ensure)
  (add-hook 'java-ts-mode-hook 'eglot-ensure)
  (add-hook 'c-ts-mode-hook 'eglot-ensure)
  (add-hook 'cpp-ts-mode-hook 'eglot-ensure)
#+end_src

* Data Science
I'll start by initially throwing all of my configuration that is
broadly related to my data work here. I may move it later.
#+begin_src emacs-lisp
  (use-package micromamba)
#+end_src

* Testing Ground

#+begin_src emacs-lisp
  (use-package gptel
    :config
    (setq
     gptel-model 'qwen2.5-coder:14b
     gptel-backend (gptel-make-ollama "Ollama"
                     :host "127.0.0.1:11434"
                     :stream t
                     :models '(qwen2.5-coder:14b))))
#+end_src


* Theme

I want /all/ of my theme stuff to be located here, with the exception
of some basic core configuration located above.

I am currently using gruvbox themes, but enjoy the material and nano
themes. I might make my own eventually...

#+begin_src emacs-lisp
  (use-package gruvbox-theme)

  ;; this should probably be based on the dpi or something? (note: check
  ;; out the code for ~org--get-display-dpi~)
  (set-face-attribute 'default nil :height 210)
  (set-frame-font "Iosevka" nil t)
  (toggle-frame-maximized)




  ;; define a helper function for switching between my light/dark theme
  (defun cjl/refresh-theme ()
    (interactive)
    (let ((hour (decoded-time-hour (decode-time (float-time)))))
      (if (and (>= hour 8) (<= hour 19))
  	(load-theme 'modus-operandi t)
  					; (load-theme 'gruvbox-light-medium t)
        (load-theme 'modus-vivendi-tinted t))))

  ;; call it on emacs start
  (cjl/refresh-theme)

  ;; call it every half hour (the repeat is in seconds)
  ;; (run-at-time "12:00am" "30 minutes" #'cjl/refresh-theme)
  (run-at-time 0 (* 30 60) #'cjl/refresh-theme)
#+end_src
